{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ammar\\\\Desktop\\\\github-doctor\\\\doctor-dashboard\\\\src\\\\pages\\\\PatientDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\n// import QRCode from \"qrcode.react\";\nimport { QRCodeCanvas } from \"qrcode.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientDetail() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [patient, setPatient] = useState(null);\n  useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const response = await axios.get(`http://localhost:4600/api/auth/patient-card/${id}`);\n        setPatient(response.data);\n      } catch (error) {\n        console.error(\"Error fetching patient data:\", error);\n      }\n    };\n    fetchPatient();\n  }, [id]);\n  const generatePatientReport = async () => {\n    if (!patient) return;\n    const doc = new jsPDF();\n    doc.setFontSize(18);\n    doc.text(\"Clinic Name\", 105, 15, null, null, \"center\");\n    doc.setFontSize(12);\n    doc.text(`Patient Report - ${new Date().toLocaleDateString()}`, 105, 22, null, null, \"center\");\n    let startY = 30;\n    if (patient.profileImage) {\n      try {\n        const imageUrl = `http://localhost:4600${patient.profileImage}`;\n        const imageData = await getBase64Image(imageUrl);\n        doc.addImage(imageData, \"JPEG\", 80, startY, 50, 50);\n        startY += 60;\n      } catch (error) {\n        console.error(\"Error loading image:\", error);\n      }\n    }\n    doc.autoTable({\n      startY: startY + 10,\n      head: [[\"Info\", \"Details\"]],\n      body: [[\"Name\", patient.name], [\"Phone Number\", patient.phoneNumber], [\"Blood Type\", patient.blood], [\"Token Number\", `Token-${id}`]],\n      theme: \"grid\",\n      headStyles: {\n        fillColor: [22, 160, 133]\n      },\n      styles: {\n        fontSize: 12,\n        cellPadding: 5\n      }\n    });\n    doc.setFontSize(10);\n    doc.text(\"© 2025 Clinic Name | Confidential Report\", 105, doc.internal.pageSize.height - 10, null, null, \"center\");\n    doc.save(`Patient_Report_${patient.name}.pdf`);\n  };\n  const getBase64Image = (url, maxWidth = 60, maxHeight = 60) => {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.crossOrigin = \"Anonymous\";\n      img.src = url;\n      img.onload = () => {\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        let width = img.width;\n        let height = img.height;\n        if (width > maxWidth || height > maxHeight) {\n          const aspectRatio = width / height;\n          if (width > height) {\n            width = maxWidth;\n            height = maxWidth / aspectRatio;\n          } else {\n            height = maxHeight;\n            width = maxHeight * aspectRatio;\n          }\n        }\n        canvas.width = width * 2;\n        canvas.height = height * 2;\n        ctx.scale(2, 2);\n        ctx.imageSmoothingEnabled = true;\n        ctx.drawImage(img, 0, 0, width, height);\n        resolve(canvas.toDataURL(\"image/jpeg\", 1.0));\n      };\n      img.onerror = reject;\n    });\n  };\n\n  //   if (!patient) return <div>Loading...</div>;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-6\",\n    children: \"test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientDetail, \"okfy1A9b/9bd5T5ZRMC9PjK4sSg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PatientDetail;\nexport default PatientDetail;\nvar _c;\n$RefreshReg$(_c, \"PatientDetail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","axios","jsPDF","QRCodeCanvas","jsxDEV","_jsxDEV","PatientDetail","_s","id","navigate","patient","setPatient","fetchPatient","response","get","data","error","console","generatePatientReport","doc","setFontSize","text","Date","toLocaleDateString","startY","profileImage","imageUrl","imageData","getBase64Image","addImage","autoTable","head","body","name","phoneNumber","blood","theme","headStyles","fillColor","styles","fontSize","cellPadding","internal","pageSize","height","save","url","maxWidth","maxHeight","Promise","resolve","reject","img","Image","crossOrigin","src","onload","canvas","document","createElement","ctx","getContext","width","aspectRatio","scale","imageSmoothingEnabled","drawImage","toDataURL","onerror","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ammar/Desktop/github-doctor/doctor-dashboard/src/pages/PatientDetail.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n// import QRCode from \"qrcode.react\";\r\nimport { QRCodeCanvas } from \"qrcode.react\";\r\n\r\nfunction PatientDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [patient, setPatient] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchPatient = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:4600/api/auth/patient-card/${id}`\r\n        );\r\n       \r\n\r\n        setPatient(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching patient data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchPatient();\r\n  }, [id]);\r\n\r\n  const generatePatientReport = async () => {\r\n    if (!patient) return;\r\n    const doc = new jsPDF();\r\n\r\n    doc.setFontSize(18);\r\n    doc.text(\"Clinic Name\", 105, 15, null, null, \"center\");\r\n    doc.setFontSize(12);\r\n    doc.text(\r\n      `Patient Report - ${new Date().toLocaleDateString()}`,\r\n      105,\r\n      22,\r\n      null,\r\n      null,\r\n      \"center\"\r\n    );\r\n\r\n    let startY = 30;\r\n    if (patient.profileImage) {\r\n      try {\r\n        const imageUrl = `http://localhost:4600${patient.profileImage}`;\r\n        const imageData = await getBase64Image(imageUrl);\r\n        doc.addImage(imageData, \"JPEG\", 80, startY, 50, 50);\r\n        startY += 60;\r\n      } catch (error) {\r\n        console.error(\"Error loading image:\", error);\r\n      }\r\n    }\r\n\r\n    doc.autoTable({\r\n      startY: startY + 10,\r\n      head: [[\"Info\", \"Details\"]],\r\n      body: [\r\n        [\"Name\", patient.name],\r\n        [\"Phone Number\", patient.phoneNumber],\r\n        [\"Blood Type\", patient.blood],\r\n        [\"Token Number\", `Token-${id}`],\r\n      ],\r\n      theme: \"grid\",\r\n      headStyles: { fillColor: [22, 160, 133] },\r\n      styles: { fontSize: 12, cellPadding: 5 },\r\n    });\r\n\r\n    doc.setFontSize(10);\r\n    doc.text(\r\n      \"© 2025 Clinic Name | Confidential Report\",\r\n      105,\r\n      doc.internal.pageSize.height - 10,\r\n      null,\r\n      null,\r\n      \"center\"\r\n    );\r\n\r\n    doc.save(`Patient_Report_${patient.name}.pdf`);\r\n  };\r\n\r\n  const getBase64Image = (url, maxWidth = 60, maxHeight = 60) => {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.crossOrigin = \"Anonymous\";\r\n      img.src = url;\r\n\r\n      img.onload = () => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        let width = img.width;\r\n        let height = img.height;\r\n\r\n        if (width > maxWidth || height > maxHeight) {\r\n          const aspectRatio = width / height;\r\n          if (width > height) {\r\n            width = maxWidth;\r\n            height = maxWidth / aspectRatio;\r\n          } else {\r\n            height = maxHeight;\r\n            width = maxHeight * aspectRatio;\r\n          }\r\n        }\r\n\r\n        canvas.width = width * 2;\r\n        canvas.height = height * 2;\r\n        ctx.scale(2, 2);\r\n\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 1.0));\r\n      };\r\n\r\n      img.onerror = reject;\r\n    });\r\n  };\r\n\r\n//   if (!patient) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6\">\r\n        test\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientDetail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}